/*
 * Copyright (c) Florian Schaefer 2019.
 *
 * This file is subject to the terms and conditions defined in the
 * file 'LICENSE.txt', which is part of this source code package.
 */

plugins {
    id 'java'
}

task buildDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = reporting.file("docs")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

group 'net.adeptropolis'
version '1.0'

sourceCompatibility = 1.9

repositories {
    mavenCentral()
}

//def static getOsString() {
//    String vendor = System.getProperty("java.vendor");
//    if ("The Android Project" == vendor) {
//        return "android";
//    } else {
//        String osName = System.getProperty("os.name");
//        osName = osName.toLowerCase(Locale.ENGLISH);
//        if (osName.startsWith("windows")) {
//            return "windows";
//        } else if (osName.startsWith("mac os")) {
//            return "apple";
//        } else if (osName.startsWith("linux")) {
//            return "linux";
//        } else if (osName.startsWith("sun")) {
//            return "sun"
//        }
//        return "unknown"
//    }
//}
//
//def static getArchString() {
//    String osArch = System.getProperty("os.arch");
//    osArch = osArch.toLowerCase(Locale.ENGLISH);
//    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
//        return "x86";
//    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
//        return "x86_64";
//    } else if (osArch.startsWith("arm64")) {
//        return "arm64";
//    } else if (osArch.startsWith("arm")) {
//        return "arm";
//    } else if ("ppc" == osArch || "powerpc" == osArch) {
//        return "ppc";
//    } else if (osArch.startsWith("ppc")) {
//        return "ppc_64";
//    } else if (osArch.startsWith("sparc")) {
//        return "sparc";
//    } else if (osArch.startsWith("mips64")) {
//        return "mips64";
//    } else if (osArch.startsWith("mips")) {
//        return "mips";
//    } else if (osArch.contains("risc")) {
//        return "risc";
//    }
//    return "unknown";
//}

//def jCudaVersion = "10.1.0"
//def jCudaVersion = "10.1.1"
def jCudaVersion = "0.9.2"

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

//    def classifier = getOsString() + "-" + getArchString()
    def classifier = 'linux-x86_64'
    compile (group: 'org.jcuda', name: 'jcuda', version: jCudaVersion,) { transitive=false }
    compile (group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) { transitive=false }
    compile (group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion){ transitive=false }
    compile group: 'org.jcuda', name: 'jcuda-natives', classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcublas-natives', classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcusparse-natives', classifier: classifier, version: jCudaVersion
//
//    compile group: 'org.jcuda', name: 'jcuda-natives', classifier: classifier, version: jCudaVersion
//    compile group: 'org.jcuda', name: 'jcusparse-natives', classifier: classifier, version: jCudaVersion

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.26'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}
